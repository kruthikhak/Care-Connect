# Generated by Django 5.0.2 on 2025-03-30 14:03

from django.db import migrations
import random
from django.core.exceptions import ValidationError
from datetime import datetime, timedelta
from django.contrib.auth.hashers import make_password

def generate_review_comment(rating, entity_type='hospital'):
    positive_hospital_comments = [
        "Excellent facilities and caring staff.",
        "Very clean and well-maintained hospital.",
        "The staff was professional and attentive.",
        "State-of-the-art equipment and modern facilities.",
        "Great experience, would highly recommend.",
        "Very organized and efficient service.",
        "The best healthcare facility in the area.",
        "Outstanding care and attention to detail.",
        "Very impressed with the level of care.",
        "Clean, efficient, and professional service."
    ]
    
    negative_hospital_comments = [
        "Could improve on waiting times.",
        "Parking facilities need improvement.",
        "Reception staff could be more helpful.",
        "The billing process was confusing.",
        "Wait times were longer than expected.",
        "Communication could be better.",
        "Some facilities need updating.",
        "A bit expensive compared to others.",
        "The cafeteria food needs improvement.",
        "The admission process was slow."
    ]
    
    positive_doctor_comments = [
        "Very knowledgeable and caring doctor.",
        "Excellent bedside manner.",
        "Takes time to explain everything clearly.",
        "Very experienced and professional.",
        "Great at making patients feel comfortable.",
        "Highly skilled and compassionate.",
        "Best doctor I've ever consulted.",
        "Very thorough in examination.",
        "Explains things in simple terms.",
        "Very patient and understanding."
    ]
    
    negative_doctor_comments = [
        "Could spend more time with patients.",
        "Sometimes runs behind schedule.",
        "Could improve communication.",
        "Consultation felt rushed.",
        "Wait times can be long.",
        "Could be more approachable.",
        "Expensive consultation fees.",
        "Could explain things better.",
        "Follow-up process needs improvement.",
        "Reception staff could be more helpful."
    ]
    
    comments = []
    if entity_type == 'hospital':
        if rating >= 4:
            comments.extend(random.sample(positive_hospital_comments, 2))
        elif rating <= 2:
            comments.extend(random.sample(negative_hospital_comments, 2))
        else:
            comments.append(random.choice(positive_hospital_comments))
            comments.append(random.choice(negative_hospital_comments))
    else:  # doctor
        if rating >= 4:
            comments.extend(random.sample(positive_doctor_comments, 2))
        elif rating <= 2:
            comments.extend(random.sample(negative_doctor_comments, 2))
        else:
            comments.append(random.choice(positive_doctor_comments))
            comments.append(random.choice(negative_doctor_comments))
    
    return " ".join(comments)

def load_reviews_data(apps, schema_editor):
    Review = apps.get_model('hospitals', 'Review')
    Hospital = apps.get_model('hospitals', 'Hospital')
    Doctor = apps.get_model('hospitals', 'Doctor')
    CustomUser = apps.get_model('users', 'CustomUser')
    
    # Get all hospitals, doctors and users
    hospitals = list(Hospital.objects.all())
    doctors = list(Doctor.objects.all())
    
    # Delete existing non-doctor users
    doctor_users = [doctor.user.id for doctor in doctors if doctor.user]
    CustomUser.objects.exclude(id__in=doctor_users).delete()
    
    # Create test users
    users = []
    for i in range(50):
        try:
            user = CustomUser.objects.create(
                username=f"testuser{i}",
                email=f"testuser{i}@example.com",
                first_name=f"Test{i}",
                last_name=f"User{i}",
                password=make_password("password123")  # Hash the password
            )
            users.append(user)
        except Exception as e:
            print(f"Error creating test user {i}: {e}")
            continue
    
    if not users:
        print("No users available for creating reviews!")
        return
    
    # Generate reviews for hospitals
    for hospital in hospitals:
        num_reviews = random.randint(10, 30)  # Each hospital gets 10-30 reviews
        for _ in range(num_reviews):
            try:
                rating = random.randint(1, 5)
                user = random.choice(users)
                days_ago = random.randint(1, 365)
                review_date = datetime.now() - timedelta(days=days_ago)
                
                Review.objects.create(
                    user=user,
                    hospital=hospital,
                    rating=rating,
                    comment=generate_review_comment(rating, 'hospital'),
                    created_at=review_date,
                    updated_at=review_date
                )
            except ValidationError as e:
                print(f"Validation error creating hospital review: {e}")
            except Exception as e:
                print(f"Unexpected error creating hospital review: {e}")
    
    # Generate reviews for doctors
    for doctor in doctors:
        num_reviews = random.randint(5, 20)  # Each doctor gets 5-20 reviews
        for _ in range(num_reviews):
            try:
                rating = random.randint(1, 5)
                user = random.choice(users)
                days_ago = random.randint(1, 365)
                review_date = datetime.now() - timedelta(days=days_ago)
                
                Review.objects.create(
                    user=user,
                    doctor=doctor,
                    rating=rating,
                    comment=generate_review_comment(rating, 'doctor'),
                    created_at=review_date,
                    updated_at=review_date
                )
            except ValidationError as e:
                print(f"Validation error creating doctor review: {e}")
            except Exception as e:
                print(f"Unexpected error creating doctor review: {e}")

def reverse_reviews_data(apps, schema_editor):
    Review = apps.get_model('hospitals', 'Review')
    Review.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('hospitals', '0003_load_doctors_data'),
    ]

    operations = [
        migrations.RunPython(load_reviews_data, reverse_reviews_data),
    ]
