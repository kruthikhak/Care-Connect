# Generated by Django 5.0.2 on 2025-03-30 13:48

from django.db import migrations
import csv
from django.core.exceptions import ValidationError
import random

def load_hospital_data(apps, schema_editor):
    Hospital = apps.get_model('hospitals', 'Hospital')
    Specialty = apps.get_model('hospitals', 'Specialty')
    
    # Create default specialties if they don't exist
    default_specialties = [
        'Cardiology', 'Orthopedics', 'Neurology', 'Pediatrics', 'Oncology',
        'Dental', 'Eye Care', 'ENT', 'General Medicine', 'Emergency Care'
    ]
    
    specialty_objects = {}
    for specialty_name in default_specialties:
        specialty, _ = Specialty.objects.get_or_create(
            name=specialty_name,
            defaults={'description': f'Specialty for {specialty_name}'}
        )
        specialty_objects[specialty_name.lower()] = specialty
    
    # Read the CSV file
    with open('data/HospitalsInIndia (1).csv', 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            try:
                # Create hospital with required fields
                hospital = Hospital.objects.create(
                    name=row['Hospital'],
                    hospital_type='private',  # Default to private since we don't have this info
                    address=row['LocalAddress'],
                    city=row['City'],
                    state=row['State'],
                    country='India',
                    postal_code=row['Pincode'],
                    latitude=0.0,  # Default value since we don't have this info
                    longitude=0.0,  # Default value since we don't have this info
                    phone='',  # Default empty since we don't have this info
                    email='',  # Default empty since we don't have this info
                    description=f"Hospital located in {row['City']}, {row['State']}",
                    facilities=['Emergency Care', 'Outpatient Services', 'Inpatient Services'],
                    emergency_services=True,
                    rating=round(random.uniform(3.0, 5.0), 1),  # Random rating between 3.0 and 5.0
                    average_rating=round(random.uniform(3.0, 5.0), 1),  # Random average rating
                    total_reviews=random.randint(10, 100),  # Random number of reviews
                    success_rate=round(random.uniform(70.0, 98.0), 1)  # Random success rate
                )
                
                # Associate specialties based on hospital name
                name_lower = hospital.name.lower()
                if 'heart' in name_lower or 'cardio' in name_lower:
                    hospital.specialties.add(specialty_objects['cardiology'])
                if 'eye' in name_lower or 'ophthal' in name_lower:
                    hospital.specialties.add(specialty_objects['eye care'])
                if 'ortho' in name_lower:
                    hospital.specialties.add(specialty_objects['orthopedics'])
                if 'neuro' in name_lower or 'brain' in name_lower:
                    hospital.specialties.add(specialty_objects['neurology'])
                if 'child' in name_lower or 'pediatric' in name_lower:
                    hospital.specialties.add(specialty_objects['pediatrics'])
                if 'cancer' in name_lower or 'oncology' in name_lower:
                    hospital.specialties.add(specialty_objects['oncology'])
                if 'dental' in name_lower:
                    hospital.specialties.add(specialty_objects['dental'])
                if 'ent' in name_lower:
                    hospital.specialties.add(specialty_objects['ent'])
                
                # Add general medicine as a default specialty if no other specialty was added
                if hospital.specialties.count() == 0:
                    hospital.specialties.add(specialty_objects['general medicine'])
                
            except ValidationError as e:
                print(f"Validation error creating hospital {row['Hospital']}: {e}")
            except Exception as e:
                print(f"Unexpected error creating hospital {row['Hospital']}: {e}")

def reverse_hospital_data(apps, schema_editor):
    Hospital = apps.get_model('hospitals', 'Hospital')
    Hospital.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('hospitals', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_hospital_data, reverse_hospital_data),
    ]
