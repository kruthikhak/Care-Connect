# Generated by Django 5.0.2 on 2025-03-30 14:02

from django.db import migrations, transaction
from django.core.exceptions import ValidationError
import random
from decimal import Decimal
from django.contrib.auth import get_user_model
from django.contrib.auth.hashers import make_password

def generate_license_number():
    return f"MED{random.randint(10000, 99999)}"

def generate_time_slots():
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
    time_slots = []
    for day in days:
        start_hour = random.randint(8, 10)
        end_hour = random.randint(16, 18)
        time_slots.append({
            'day': day,
            'start_time': f'{start_hour:02d}:00',
            'end_time': f'{end_hour:02d}:00'
        })
    return time_slots

def load_doctors_data(apps, schema_editor):
    Hospital = apps.get_model('hospitals', 'Hospital')
    Doctor = apps.get_model('hospitals', 'Doctor')
    Specialty = apps.get_model('hospitals', 'Specialty')
    CustomUser = apps.get_model('users', 'CustomUser')

    # Get hospitals for testing (increased from 10 to 15)
    hospitals = list(Hospital.objects.all()[:15])
    specialties = list(Specialty.objects.all())

    first_names = [
        'Aditya', 'Arjun', 'Dhruv', 'Ishaan', 'Krishna', 'Rohan', 'Vihaan',
        'Aarav', 'Vivaan', 'Reyansh', 'Ananya', 'Diya', 'Ishita', 'Kavya',
        'Mira', 'Prisha', 'Riya', 'Saanvi', 'Tanvi', 'Zara', 'Neha', 'Aryan',
        'Kabir', 'Sahil', 'Vedant'
    ]
    last_names = [
        'Patel', 'Shah', 'Kumar', 'Singh', 'Sharma', 'Verma', 'Gupta',
        'Malhotra', 'Reddy', 'Kapoor', 'Joshi', 'Mehta', 'Chopra', 'Agarwal',
        'Iyer', 'Nair', 'Rao', 'Menon', 'Pillai', 'Desai', 'Bhat', 'Shetty',
        'Choudhury', 'Trivedi', 'Saxena'
    ]

    for hospital in hospitals:
        # Create more doctors per hospital (increased from 2 to 3)
        num_doctors = 3
        for _ in range(num_doctors):
            try:
                with transaction.atomic():
                    first_name = random.choice(first_names)
                    last_name = random.choice(last_names)
                    email = f"{first_name.lower()}.{last_name.lower()}@example.com"
                    username = f"dr_{first_name.lower()}_{last_name.lower()}"

                    # Create user first
                    user = CustomUser.objects.create(
                        username=username,
                        email=email,
                        first_name=first_name,
                        last_name=last_name,
                        password=make_password("password123")  # Set password directly
                    )

                    # Create doctor profile
                    doctor = Doctor.objects.create(
                        user=user,
                        first_name=first_name,  # Add first name
                        last_name=last_name,    # Add last name
                        license_number=generate_license_number(),
                        years_of_experience=random.randint(3, 25),
                        education=[f"MBBS from {random.choice(['AIIMS Delhi', 'CMC Vellore', 'JIPMER Puducherry', 'KGMC Lucknow', 'Grant Medical College Mumbai'])}",
                                 f"{random.choice(['MD', 'MS', 'DNB'])} from {random.choice(['PGI Chandigarh', 'AIIMS Bangalore', 'KEM Hospital Mumbai', 'MAMC Delhi'])}"],
                        certifications=[
                            f"Board Certified in {random.choice(['Internal Medicine', 'Surgery', 'Pediatrics', 'Cardiology', 'Neurology', 'Orthopedics'])}",
                            f"Fellowship in {random.choice(['Advanced Cardiac Care', 'Minimal Invasive Surgery', 'Pediatric Oncology', 'Neurosurgery'])}"
                        ],
                        bio=f"Dr. {first_name} {last_name} is a highly qualified medical professional with extensive experience in patient care and specialized treatments.",
                        consultation_fee=random.randint(500, 2000),
                        available_time_slots=generate_time_slots(),
                        average_rating=round(random.uniform(3.5, 5.0), 1),
                        total_reviews=random.randint(10, 100),
                        success_rate=random.randint(85, 98)
                    )

                    # Add hospital
                    doctor.hospitals.add(hospital)

                    # Add 1-2 random specialties
                    num_specialties = random.randint(1, 2)
                    selected_specialties = random.sample(specialties, num_specialties)
                    doctor.specialties.set(selected_specialties)

            except ValidationError as e:
                print(f"Validation error creating doctor {first_name} {last_name}: {str(e)}")
            except Exception as e:
                print(f"Unexpected error creating doctor {first_name} {last_name}: {str(e)}")

def reverse_doctors_data(apps, schema_editor):
    Doctor = apps.get_model('hospitals', 'Doctor')
    CustomUser = apps.get_model('users', 'CustomUser')
    
    with transaction.atomic():
        # Delete all doctors
        Doctor.objects.all().delete()
        # Delete associated users
        CustomUser.objects.filter(doctor__isnull=False).delete()

class Migration(migrations.Migration):
    dependencies = [
        ('hospitals', '0002_load_hospital_data'),
        ('users', '0001_initial'),  # Add dependency on users app
    ]

    operations = [
        migrations.RunPython(load_doctors_data, reverse_doctors_data),
    ]
